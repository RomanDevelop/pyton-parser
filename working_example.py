"""
–†–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∞–π—Ç–æ–º
"""

from product_parser import parse_products
import asyncio
from product_parser import ProductParser


def test_with_real_site():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∞–π—Ç–æ–º"""
    print("=== –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∞–π—Ç–æ–º ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤
    test_url = "https://quotes.toscrape.com/"
    
    print(f"–ü–∞—Ä—Å–∏–º: {test_url}")
    print("–≠—Ç–æ—Ç —Å–∞–π—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ '—Ç–æ–≤–∞—Ä—ã'")
    
    try:
        products = parse_products(test_url, headless=True)
        print(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(products)}")
        
        for i, product in enumerate(products[:5], 1):
            print(f"{i}. ID: {product['id']}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name'][:100]}{'...' if len(product['name']) > 100 else ''}")
            print(f"   –¶–µ–Ω–∞: {product['price']}")
            print()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


async def test_amazon_workaround():
    """–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Amazon"""
    print("\n=== –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Amazon ===")
    
    print("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Amazon –Ω—É–∂–Ω–æ:")
    print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã")
    print("2. –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏")
    print("3. –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
    print("4. –†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å User-Agent")
    
    # –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è Amazon
    amazon_code = '''
# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è Amazon —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
import asyncio
import random
from product_parser import ProductParser

class AmazonWorkaroundParser(ProductParser):
    async def _setup_page(self, page):
        # –†–æ—Ç–∏—Ä—É–µ–º User-Agent
        user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
        ]
        
        await page.set_extra_http_headers({
            'User-Agent': random.choice(user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        await asyncio.sleep(random.uniform(1, 3))
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        await page.mouse.move(random.randint(100, 500), random.randint(100, 500))
    
    async def parse(self, url):
        if not self.browser:
            await self._init_browser()
            
        page = await self.browser.new_page()
        await self._setup_page(page)
        
        try:
            await page.goto(url, timeout=60000)
            await asyncio.sleep(random.uniform(2, 5))
            
            # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...
            
        finally:
            await page.close()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async def main():
    async with AmazonWorkaroundParser(headless=False) as parser:
        products = await parser.parse("https://www.amazon.com/s?k=shoes")
        print(products)

asyncio.run(main())
    '''
    
    print("–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:")
    print(amazon_code)


def show_usage_instructions():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("\n=== –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä ===")
    print("""
1. –ë–ê–ó–û–í–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
   ```python
   from product_parser import parse_products
   
   # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±
   products = parse_products("https://your-site.com/products")
   print(products)
   ```

2. –ê–°–ò–ù–•–†–û–ù–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
   ```python
   import asyncio
   from product_parser import ProductParser
   
   async def main():
       async with ProductParser() as parser:
           products = await parser.parse("https://your-site.com/products")
           print(products)
   
   asyncio.run(main())
   ```

3. –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–î –ö–û–ù–ö–†–ï–¢–ù–´–ô –°–ê–ô–¢:
   ```python
   from product_parser import ProductParser
   
   class MySiteParser(ProductParser):
       async def _wait_for_content(self, page):
           # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
           await page.wait_for_selector('.product-item', timeout=10000)
           return True
       
       async def _extract_product_data(self, element, page, index):
           # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∞–π—Ç–∞
           name_el = await element.query_selector('.product-title')
           price_el = await element.query_selector('.product-price')
           
           return {
               "id": str(index + 1),
               "name": await name_el.inner_text() if name_el else "–¢–æ–≤–∞—Ä",
               "price": await price_el.inner_text() if price_el else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
           }
   ```

4. –†–ê–ë–û–¢–ê –° AMAZON:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã
   - –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
   - –†–æ—Ç–∏—Ä—É–π—Ç–µ User-Agent
   - –ò–º–∏—Ç–∏—Ä—É–π—Ç–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Selenium –≤–º–µ—Å—Ç–æ Playwright

5. –£–°–¢–ê–ù–û–í–ö–ê –ò –ó–ê–ü–£–°–ö:
   ```bash
   # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   pip install -r requirements.txt
   
   # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
   playwright install
   
   # –ó–∞–ø—É—Å–∫
   python product_parser.py
   ```
    """)


if __name__ == "__main__":
    print("üöÄ –†–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∞–π—Ç–æ–º
    test_with_real_site()
    
    # –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Amazon
    asyncio.run(test_amazon_workaround())
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    show_usage_instructions()
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–∞—Ä—Å–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    print("\n–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Amazon –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–æ–¥—ã,")
    print("–¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")
