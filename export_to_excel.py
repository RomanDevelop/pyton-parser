"""
–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ –≤ Excel —Ç–∞–±–ª–∏—Ü—É
"""

import pandas as pd
from amazon_advanced import AdvancedAmazonParser
import asyncio
import logging
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def parse_and_export_to_excel(url: str, filename: str = None):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
    
    Args:
        url: URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        filename: –ò–º—è —Ñ–∞–π–ª–∞ Excel (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"amazon_products_{timestamp}.xlsx"
    
    print(f"üöÄ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å: {url}")
    print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel: {filename}")
    print("=" * 60)
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
        async with AdvancedAmazonParser(headless=True) as parser:
            products = await parser.parse(url)
        
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(products)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df['–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        df['URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞'] = url
        df['–ù–æ–º–µ—Ä'] = range(1, len(df) + 1)
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_order = ['–ù–æ–º–µ—Ä', 'id', 'name', 'price', '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞']
        df = df[columns_order]
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        df.columns = ['‚Ññ', 'ID —Ç–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞']
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
            df.to_excel(writer, sheet_name='–¢–æ–≤–∞—Ä—ã', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–¢–æ–≤–∞—Ä—ã']
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            column_widths = {
                'A': 8,   # ‚Ññ
                'B': 15,  # ID —Ç–æ–≤–∞—Ä–∞
                'C': 60,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                'D': 15,  # –¶–µ–Ω–∞
                'E': 20,  # –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
                'F': 30   # URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            }
            
            for col, width in column_widths.items():
                worksheet.column_dimensions[col].width = width
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_data = {
                '–ü–∞—Ä–∞–º–µ—Ç—Ä': [
                    '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤',
                    '–¢–æ–≤–∞—Ä—ã —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π',
                    '–¢–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω—ã',
                    '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                    'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞',
                    '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
                ],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    len(products),
                    len([p for p in products if p['price'] != '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']),
                    len([p for p in products if p['price'] == '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']),
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    url,
                    f"~{len(products) * 2} —Å–µ–∫—É–Ω–¥"
                ]
            }
            
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_worksheet = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            stats_worksheet.column_dimensions['A'].width = 30
            stats_worksheet.column_dimensions['B'].width = 40
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
        print(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(filename)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"   ‚Ä¢ –° —Ü–µ–Ω–æ–π: {len([p for p in products if p['price'] != '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'])}")
        print(f"   ‚Ä¢ –ë–µ–∑ —Ü–µ–Ω—ã: {len([p for p in products if p['price'] == '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
        print("\nüîç –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, product in enumerate(products[:5], 1):
            print(f"   {i}. {product['name'][:50]}{'...' if len(product['name']) > 50 else ''} - {product['price']}")
        
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


async def parse_multiple_urls(urls: list, base_filename: str = None):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL –∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ –æ–¥–∏–Ω Excel —Ñ–∞–π–ª
    
    Args:
        urls: –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        base_filename: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    
    if not base_filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        base_filename = f"amazon_products_multiple_{timestamp}.xlsx"
    
    print(f"üöÄ –ü–∞—Ä—Å–∏–Ω–≥ {len(urls)} URL")
    print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel: {base_filename}")
    print("=" * 60)
    
    all_products = []
    
    try:
        async with AdvancedAmazonParser(headless=True) as parser:
            for i, url in enumerate(urls, 1):
                print(f"\nüì¶ –ü–∞—Ä—Å–∏–Ω–≥ {i}/{len(urls)}: {url}")
                
                try:
                    products = await parser.parse(url)
                    if products:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
                        for product in products:
                            product['URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞'] = url
                            product['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {i}"
                        
                        all_products.extend(products)
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    else:
                        print(f"   ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                    continue
        
        if not all_products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º URL")
            return None
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(all_products)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df['–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        df['–ù–æ–º–µ—Ä'] = range(1, len(df) + 1)
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_order = ['–ù–æ–º–µ—Ä', 'id', 'name', 'price', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞', '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞']
        df = df[columns_order]
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        df.columns = ['‚Ññ', 'ID —Ç–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞', '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞']
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        with pd.ExcelWriter(base_filename, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–í—Å–µ —Ç–æ–≤–∞—Ä—ã', index=False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            worksheet = writer.sheets['–í—Å–µ —Ç–æ–≤–∞—Ä—ã']
            worksheet.column_dimensions['A'].width = 8   # ‚Ññ
            worksheet.column_dimensions['B'].width = 15  # ID —Ç–æ–≤–∞—Ä–∞
            worksheet.column_dimensions['C'].width = 60  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            worksheet.column_dimensions['D'].width = 15  # –¶–µ–Ω–∞
            worksheet.column_dimensions['E'].width = 20  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            worksheet.column_dimensions['F'].width = 30  # URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            worksheet.column_dimensions['G'].width = 20  # –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        print(f"\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {base_filename}")
        print(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(base_filename)}")
        print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
        
        return base_filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ –≤ Excel")
    print("=" * 50)
    
    # URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    url = "https://www.amazon.com/s?k=shoes"
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ URL")
    print("2. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL")
    print("3. –ü–∞—Ä—Å–∏–Ω–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice == "1":
        # –û–¥–∏–Ω URL
        asyncio.run(parse_and_export_to_excel(url))
        
    elif choice == "2":
        # –ù–µ—Å–∫–æ–ª—å–∫–æ URL
        urls = [
            "https://www.amazon.com/s?k=shoes",
            "https://www.amazon.com/s?k=sneakers",
            "https://www.amazon.com/s?k=boots"
        ]
        asyncio.run(parse_multiple_urls(urls))
        
    elif choice == "3":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        custom_url = input("–í–≤–µ–¥–∏—Ç–µ URL: ").strip()
        if not custom_url:
            custom_url = url
        
        filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ").strip()
        if not filename:
            filename = None
        
        asyncio.run(parse_and_export_to_excel(custom_url, filename))
        
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()
