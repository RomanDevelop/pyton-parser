"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä Amazon —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
"""

import asyncio
import random
import time
from product_parser import ProductParser
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AdvancedAmazonParser(ProductParser):
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä Amazon —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    """
    
    def __init__(self, headless: bool = False, timeout: int = 60000):
        super().__init__(headless, timeout)
        self.user_agents = [
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0'
        ]
    
    async def _setup_page(self, page):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
        user_agent = random.choice(self.user_agents)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        await page.set_extra_http_headers({
            'User-Agent': user_agent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Cache-Control': 'max-age=0'
        })
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewport
        await page.set_viewport_size({"width": 1920, "height": 1080})
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        await page.route("**/*.{png,jpg,jpeg,gif,svg,ico,woff,woff2,ttf,eot}", lambda route: route.abort())
        await page.route("**/ads/**", lambda route: route.abort())
        await page.route("**/analytics/**", lambda route: route.abort())
    
    async def _human_like_behavior(self, page):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            for _ in range(random.randint(2, 5)):
                x = random.randint(100, 1800)
                y = random.randint(100, 1000)
                await page.mouse.move(x, y)
                await asyncio.sleep(random.uniform(0.1, 0.3))
            
            # –°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª
            await page.mouse.wheel(0, random.randint(100, 500))
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # –°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∏–∫
            if random.random() < 0.3:
                x = random.randint(200, 1600)
                y = random.randint(200, 800)
                await page.mouse.click(x, y)
                await asyncio.sleep(random.uniform(0.5, 1.0))
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    async def _wait_for_content(self, page):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Amazon —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        selectors = [
            '[data-component-type="s-search-result"]',
            '.s-result-item',
            '[data-asin]',
            '.s-search-result',
            '[cel_widget_id*="MAIN-SEARCH_RESULTS"]',
            '.s-widget-container',
            '[data-testid*="product"]'
        ]
        
        for attempt in range(3):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                await self._human_like_behavior(page)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                for selector in selectors:
                    try:
                        await page.wait_for_selector(selector, timeout=5000)
                        logger.info(f"‚úÖ –¢–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        return True
                    except:
                        continue
                
                # –ñ–¥–µ–º –æ–±—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
                await page.wait_for_load_state('networkidle', timeout=10000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
                for selector in selectors:
                    elements = await page.query_selector_all(selector)
                    if elements:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        return True
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(random.uniform(2, 5))
                
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < 2:
                    await asyncio.sleep(random.uniform(3, 7))
        
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    async def parse(self, url: str) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if not self.browser:
            await self._init_browser()
        
        products = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page = await self.browser.new_page()
            await self._setup_page(page)
            
            logger.info(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º: {url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(url, timeout=self.timeout)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(random.uniform(2, 4))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            await self._human_like_behavior(page)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if not await self._wait_for_content(page):
                logger.warning("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
            product_selectors = [
                '[data-component-type="s-search-result"]',
                '.s-result-item',
                '[data-asin]',
                '.s-search-result'
            ]
            
            product_elements = []
            for selector in product_selectors:
                try:
                    elements = await page.query_selector_all(selector)
                    if elements:
                        product_elements = elements
                        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —Ç–æ–≤–∞—Ä–æ–≤")
                        break
                except:
                    continue
            
            if not product_elements:
                logger.warning("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return products
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö 10 —Ç–æ–≤–∞—Ä–æ–≤
            for i, element in enumerate(product_elements[:10]):
                try:
                    product_data = await self._extract_amazon_product_data(element, i)
                    if product_data:
                        products.append(product_data)
                        logger.info(f"‚úÖ –¢–æ–≤–∞—Ä {i+1}: {product_data['name'][:50]}...")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
                    continue
            
            logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            
        finally:
            if 'page' in locals():
                await page.close()
        
        return products
    
    async def _extract_amazon_product_data(self, element, index):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ Amazon"""
        try:
            # ID —Ç–æ–≤–∞—Ä–∞
            asin = await element.get_attribute('data-asin')
            if not asin:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å—Å—ã–ª–∫–µ
                link = await element.query_selector('h2 a')
                if link:
                    href = await link.get_attribute('href')
                    if href and '/dp/' in href:
                        asin = href.split('/dp/')[1].split('/')[0]
            
            if not asin:
                asin = f"amazon_{index + 1}"
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name = ""
            name_selectors = [
                'h2 a span',
                'h2 span',
                '[data-cy="title-recipe-title"] span',
                '.s-size-mini .s-link-style .s-color-base',
                'h2 a[title]'
            ]
            
            for selector in name_selectors:
                try:
                    name_el = await element.query_selector(selector)
                    if name_el:
                        name = await name_el.inner_text()
                        if name and name.strip():
                            break
                except:
                    continue
            
            if not name:
                name = f"–¢–æ–≤–∞—Ä Amazon {asin}"
            
            # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
            price = ""
            price_selectors = [
                '.a-price-whole',
                '.a-price .a-offscreen',
                '.a-price-range',
                '[data-cy="price-recipe"] .a-price .a-offscreen',
                '.a-price-symbol + .a-price-whole',
                '.a-price .a-price-whole',
                '.a-price .a-price-symbol'
            ]
            
            for selector in price_selectors:
                try:
                    price_el = await element.query_selector(selector)
                    if price_el:
                        price_text = await price_el.inner_text()
                        if price_text and price_text.strip():
                            price = self._extract_price(price_text)
                            if price:
                                break
                except:
                    continue
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            if not price:
                price_attrs = ['data-price', 'data-asin-price', 'data-price-amount']
                for attr in price_attrs:
                    try:
                        price_value = await element.get_attribute(attr)
                        if price_value:
                            price = self._extract_price(price_value)
                            if price:
                                break
                    except:
                        continue
            
            return {
                "id": asin,
                "name": name.strip(),
                "price": price or "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞: {e}")
            return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä Amazon")
    print("=" * 50)
    
    url = "https://www.amazon.com/s?k=shoes"
    print(f"üéØ –¶–µ–ª—å: {url}")
    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ...")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...")
    print()
    
    try:
        async with AdvancedAmazonParser(headless=False) as parser:
            products = await parser.parse(url)
            
            if products:
                print(f"\n‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                print("=" * 50)
                
                for i, product in enumerate(products, 1):
                    print(f"{i:2d}. ID: {product['id']}")
                    print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name'][:80]}{'...' if len(product['name']) > 80 else ''}")
                    print(f"    –¶–µ–Ω–∞: {product['price']}")
                    print()
                
                print("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
            else:
                print("\n‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("- Amazon –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å")
                print("- –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                print("- –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞")
        print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")


if __name__ == "__main__":
    asyncio.run(main())
