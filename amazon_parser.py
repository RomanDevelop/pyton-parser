"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Amazon
–ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–æ–≤ Amazon
"""

import asyncio
from product_parser import ProductParser
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AmazonProductParser(ProductParser):
    """
    –ü–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Amazon
    –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã Amazon
    """
    
    def __init__(self, headless: bool = True, timeout: int = 30000):
        super().__init__(headless, timeout)
    
    async def _wait_for_content(self, page):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Amazon"""
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ Amazon - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            selectors = [
                '[data-component-type="s-search-result"]',
                '.s-result-item',
                '[data-asin]',
                '.s-search-result',
                '[cel_widget_id*="MAIN-SEARCH_RESULTS"]'
            ]
            
            for selector in selectors:
                try:
                    await page.wait_for_selector(selector, timeout=5000)
                    logger.info(f"–¢–æ–≤–∞—Ä—ã Amazon –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    return True
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∂–¥–µ–º –æ–±—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
            await page.wait_for_load_state('networkidle', timeout=10000)
            logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã...")
            return True
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã Amazon: {e}")
            return await super()._wait_for_content(page)
    
    async def _extract_product_data(self, element, page, index):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ Amazon"""
        try:
            # ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ data-asin –∞—Ç—Ä–∏–±—É—Ç–∞
            product_id = await element.get_attribute('data-asin')
            if not product_id:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å—Å—ã–ª–∫–µ
                link_element = await element.query_selector('h2 a')
                if link_element:
                    href = await link_element.get_attribute('href')
                    if href and '/dp/' in href:
                        product_id = href.split('/dp/')[1].split('/')[0]
            
            if not product_id:
                product_id = f"amazon_{index + 1}"
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name = ""
            name_selectors = [
                'h2 a span',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è
                'h2 span',    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                '[data-cy="title-recipe-title"] span',
                '.s-size-mini .s-link-style .s-color-base'
            ]
            
            for selector in name_selectors:
                try:
                    name_element = await element.query_selector(selector)
                    if name_element:
                        name = await name_element.inner_text()
                        if name and name.strip():
                            break
                except:
                    continue
            
            if not name:
                name = f"–¢–æ–≤–∞—Ä Amazon {product_id}"
            
            # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
            price = ""
            price_selectors = [
                '.a-price-whole',  # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞
                '.a-price .a-offscreen',  # –¶–µ–Ω–∞ –≤ offscreen
                '.a-price-range',  # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
                '[data-cy="price-recipe"] .a-price .a-offscreen',
                '.a-price-symbol + .a-price-whole',
                '.a-price .a-price-whole'
            ]
            
            for selector in price_selectors:
                try:
                    price_element = await element.query_selector(selector)
                    if price_element:
                        price_text = await price_element.inner_text()
                        if price_text and price_text.strip():
                            price = self._extract_price(price_text)
                            if price:
                                break
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–µ–Ω—É, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            if not price:
                price_attrs = ['data-price', 'data-asin-price']
                for attr in price_attrs:
                    try:
                        price_value = await element.get_attribute(attr)
                        if price_value:
                            price = self._extract_price(price_value)
                            if price:
                                break
                    except:
                        continue
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–æ–π
            if not price:
                try:
                    price_container = await element.query_selector('.a-price')
                    if price_container:
                        price_text = await price_container.inner_text()
                        price = self._extract_price(price_text)
                except:
                    pass
            
            return {
                "id": product_id,
                "name": name.strip(),
                "price": price or "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ Amazon: {e}")
            return None


async def parse_amazon_products(url: str, headless: bool = True):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å Amazon
    
    Args:
        url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Amazon —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    """
    async with AmazonProductParser(headless=headless) as parser:
        return await parser.parse(url)


def parse_amazon_sync(url: str, headless: bool = True):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Amazon
    
    Args:
        url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã Amazon —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    """
    return asyncio.run(parse_amazon_products(url, headless))


if __name__ == "__main__":
    # URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—É–≤–∏ –Ω–∞ Amazon
    amazon_url = "https://www.amazon.com/s?k=shoes"
    
    print("=== –ü–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ Amazon ===")
    print(f"–ü–∞—Ä—Å–∏–º: {amazon_url}")
    print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    try:
        products = parse_amazon_sync(amazon_url, headless=True)
        
        if products:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            print("\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print("-" * 80)
            
            for i, product in enumerate(products[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"{i:2d}. ID: {product['id']}")
                print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name'][:80]}{'...' if len(product['name']) > 80 else ''}")
                print(f"    –¶–µ–Ω–∞: {product['price']}")
                print()
            
            if len(products) > 10:
                print(f"... –∏ –µ—â–µ {len(products) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
                
        else:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("- Amazon –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å")
            print("- –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            print("- –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å headless=False –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
