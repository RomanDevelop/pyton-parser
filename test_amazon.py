"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Amazon
"""

import asyncio
from product_parser import ProductParser
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_amazon():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Amazon"""
    
    # URL Amazon
    url = "https://www.amazon.com/s?k=shoes"
    
    print("=== –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Amazon ===")
    print(f"URL: {url}")
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –≤–∏–¥–∏–º—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º
        async with ProductParser(headless=False, timeout=60000) as parser:
            print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page = await parser.browser.new_page()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
            await page.set_extra_http_headers({
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            })
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(url, timeout=60000)
            
            print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∂–¥–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await page.wait_for_load_state('networkidle', timeout=30000)
            
            print("–ò—â–µ–º —Ç–æ–≤–∞—Ä—ã...")
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            selectors_to_try = [
                '[data-component-type="s-search-result"]',
                '.s-result-item',
                '[data-asin]',
                '.s-search-result',
                '[cel_widget_id*="MAIN-SEARCH_RESULTS"]',
                '.s-widget-container',
                '[data-testid*="product"]'
            ]
            
            products_found = []
            
            for selector in selectors_to_try:
                try:
                    elements = await page.query_selector_all(selector)
                    if elements:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                        products_found = elements
                        break
                    else:
                        print(f"‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
            
            if not products_found:
                print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                content = await page.content()
                print(f"–†–∞–∑–º–µ—Ä HTML: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if "captcha" in content.lower():
                    print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA - Amazon –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å")
                elif "robot" in content.lower():
                    print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤")
                elif "shoes" in content.lower():
                    print("‚úÖ –°–ª–æ–≤–æ 'shoes' –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
                else:
                    print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
                
                return []
            
            print(f"\nüì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {len(products_found)} —Ç–æ–≤–∞—Ä–æ–≤...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö 5 —Ç–æ–≤–∞—Ä–æ–≤
            products = []
            for i, element in enumerate(products_found[:5]):
                try:
                    # ID
                    asin = await element.get_attribute('data-asin')
                    if not asin:
                        asin = f"item_{i+1}"
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ
                    name = "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    name_selectors = ['h2 a span', 'h2 span', '[data-cy="title-recipe-title"] span']
                    for ns in name_selectors:
                        try:
                            name_el = await element.query_selector(ns)
                            if name_el:
                                name = await name_el.inner_text()
                                if name and name.strip():
                                    break
                        except:
                            continue
                    
                    # –¶–µ–Ω–∞
                    price = "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    price_selectors = ['.a-price-whole', '.a-price .a-offscreen', '.a-price-range']
                    for ps in price_selectors:
                        try:
                            price_el = await element.query_selector(ps)
                            if price_el:
                                price_text = await price_el.inner_text()
                                if price_text and price_text.strip():
                                    price = price_text.strip()
                                    break
                        except:
                            continue
                    
                    product = {
                        "id": asin,
                        "name": name.strip(),
                        "price": price
                    }
                    products.append(product)
                    
                    print(f"{i+1}. {name[:50]}... - {price}")
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
                    continue
            
            await page.close()
            return products
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Amazon...")
    print("–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ")
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    input()
    
    products = asyncio.run(test_amazon())
    
    if products:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, product in enumerate(products, 1):
            print(f"{i}. ID: {product['id']}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
            print(f"   –¶–µ–Ω–∞: {product['price']}")
            print()
    else:
        print("\n‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
