"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
"""

from product_parser import parse_products
import asyncio
from product_parser import ProductParser


def demo_simple_usage():
    """–ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("=== –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===")
    
    # –ü—Ä–∏–º–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–∞–π—Ç–æ–º
    test_urls = [
        "https://httpbin.org/html",  # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        "https://example.com",       # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    ]
    
    for url in test_urls:
        print(f"\n–ü–∞—Ä—Å–∏–º: {url}")
        try:
            products = parse_products(url, headless=True)
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            for i, product in enumerate(products[:3], 1):
                print(f"  {i}. {product['name']} - {product['price']}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")


async def demo_async_usage():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"""
    print("\n=== –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===")
    
    test_url = "https://httpbin.org/html"
    
    async with ProductParser(headless=True) as parser:
        print(f"–ü–∞—Ä—Å–∏–º: {test_url}")
        try:
            products = await parser.parse(test_url)
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            for i, product in enumerate(products[:3], 1):
                print(f"  {i}. {product['name']} - {product['price']}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")


def demo_amazon_instructions():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Amazon"""
    print("\n=== –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å Amazon ===")
    print("""
Amazon –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ:

1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã:
   ```python
   from product_parser import ProductParser
   
   async with ProductParser(headless=True) as parser:
       # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
       page = await parser.browser.new_page()
       await page.route("**/*", lambda route: route.continue_())
       await page.goto("https://www.amazon.com/s?k=shoes")
   ```

2. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
   ```python
   import random
   import asyncio
   
   # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
   await asyncio.sleep(random.uniform(1, 3))
   
   # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
   await page.mouse.move(100, 100)
   await page.mouse.click(100, 100)
   ```

3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏—é User-Agent:
   ```python
   user_agents = [
       'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
       'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
       'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
   ]
   ```

4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–π—Ç:
   ```python
   class CustomAmazonParser(ProductParser):
       async def _wait_for_content(self, page):
           # –ñ–¥–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Amazon
           await page.wait_for_selector('[data-asin]', timeout=15000)
           return True
   ```
    """)


def demo_other_sites():
    """–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤"""
    print("\n=== –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤ ===")
    print("""
–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —Å–∞–π—Ç–∞–º–∏. –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã:

1. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã:
   - https://example-shop.com/products
   - https://store.example.com/catalog

2. –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã:
   - https://marketplace.com/search?q=shoes
   - https://shop.example.com/category/shoes

3. –ö–∞—Ç–∞–ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤:
   - https://catalog.example.com/items
   - https://products.example.com/list

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
```python
from product_parser import parse_products

# –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
products = parse_products("https://your-site.com/products")

# –° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
products = parse_products("https://your-site.com/products", headless=False)
```

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–π—Ç:
```python
from product_parser import ProductParser

class MySiteParser(ProductParser):
    async def _wait_for_content(self, page):
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
        await page.wait_for_selector('.product-item', timeout=10000)
        return True
    
    async def _extract_product_data(self, element, page, index):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
        name = await element.query_selector('.product-title')
        price = await element.query_selector('.product-price')
        
        return {
            "id": str(index + 1),
            "name": await name.inner_text() if name else "–¢–æ–≤–∞—Ä",
            "price": await price.inner_text() if price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        }
```
    """)


if __name__ == "__main__":
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    demo_simple_usage()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    asyncio.run(demo_async_usage())
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Amazon
    demo_amazon_instructions()
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤
    demo_other_sites()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä—ã: playwright install")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python product_parser.py")
