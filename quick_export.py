"""
–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ –≤ Excel
"""

import pandas as pd
from amazon_advanced import AdvancedAmazonParser
import asyncio
from datetime import datetime
import os


async def quick_export(url: str = "https://www.amazon.com/s?k=shoes"):
    """
    –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
    """
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"amazon_products_{timestamp}.xlsx"
    
    print(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {url}")
    print(f"üìä –§–∞–π–ª: {filename}")
    print("=" * 50)
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
        async with AdvancedAmazonParser(headless=True) as parser:
            products = await parser.parse(url)
        
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(products)
        df['–î–∞—Ç–∞'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        df['‚Ññ'] = range(1, len(df) + 1)
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        df = df[['‚Ññ', 'id', 'name', 'price', '–î–∞—Ç–∞']]
        df.columns = ['‚Ññ', 'ID —Ç–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞']
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–¢–æ–≤–∞—Ä—ã', index=False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–¢–æ–≤–∞—Ä—ã']
            worksheet.column_dimensions['A'].width = 8   # ‚Ññ
            worksheet.column_dimensions['B'].width = 15  # ID
            worksheet.column_dimensions['C'].width = 80  # –ù–∞–∑–≤–∞–Ω–∏–µ
            worksheet.column_dimensions['D'].width = 20  # –¶–µ–Ω–∞
            worksheet.column_dimensions['E'].width = 20  # –î–∞—Ç–∞
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª: {filename}")
        print(f"üìÅ –ü—É—Ç—å: {os.path.abspath(filename)}")
        print(f"üìä –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        print("\nüîç –¢–æ–≤–∞—Ä—ã:")
        for i, product in enumerate(products, 1):
            print(f"   {i:2d}. {product['name'][:50]}{'...' if len(product['name']) > 50 else ''} - ${product['price']}")
        
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


if __name__ == "__main__":
    print("üìä –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    print("=" * 30)
    
    # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å URL
    url = input("–í–≤–µ–¥–∏—Ç–µ URL (–∏–ª–∏ Enter –¥–ª—è Amazon shoes): ").strip()
    if not url:
        url = "https://www.amazon.com/s?k=shoes"
    
    result = asyncio.run(quick_export(url))
    
    if result:
        print(f"\nüéâ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {result}")
        print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
