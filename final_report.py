"""
–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É Amazon
"""

import pandas as pd
import os
from datetime import datetime

def analyze_excel_files():
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤"""
    
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ü–ê–†–°–ò–ù–ì–£ AMAZON")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_files = [f for f in os.listdir('.') if f.endswith('.xlsx')]
    
    if not excel_files:
        print("‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, filename in enumerate(excel_files, 1):
        print(f"üìã –§–∞–π–ª {i}: {filename}")
        print("-" * 40)
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(filename, sheet_name=0)
            
            print(f"   üìä –¢–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(df)}")
            print(f"   üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {os.path.getctime(filename)}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(filename)} –±–∞–π—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
            if len(df) > 0:
                print("   üîç –ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:")
                for idx, row in df.head(3).iterrows():
                    name = row.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                    price = row.get('–¶–µ–Ω–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                    print(f"      {idx+1}. {name[:50]}{'...' if len(str(name)) > 50 else ''} - {price}")
            
            print()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            print()
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    print("üìà –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢")
    print("=" * 30)
    
    all_products = []
    for filename in excel_files:
        try:
            df = pd.read_excel(filename, sheet_name=0)
            all_products.extend(df.to_dict('records'))
        except:
            continue
    
    if all_products:
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        prices = [p.get('–¶–µ–Ω–∞', p.get('price', '')) for p in all_products]
        valid_prices = [p for p in prices if p and str(p).replace('$', '').replace('.', '').isdigit()]
        
        print(f"üí∞ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π: {len(valid_prices)}")
        print(f"‚ùå –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω—ã: {len(all_products) - len(valid_prices)}")
        
        # –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤
        brands = {}
        for product in all_products:
            name = str(product.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', product.get('name', '')))
            if 'adidas' in name.lower():
                brands['adidas'] = brands.get('adidas', 0) + 1
            elif 'nike' in name.lower():
                brands['Nike'] = brands.get('Nike', 0) + 1
            elif 'skechers' in name.lower():
                brands['Skechers'] = brands.get('Skechers', 0) + 1
            elif 'new balance' in name.lower():
                brands['New Balance'] = brands.get('New Balance', 0) + 1
            elif 'under armour' in name.lower():
                brands['Under Armour'] = brands.get('Under Armour', 0) + 1
        
        if brands:
            print("\nüè∑Ô∏è –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤:")
            for brand, count in sorted(brands.items(), key=lambda x: x[1], reverse=True):
                print(f"   {brand}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        if valid_prices:
            price_values = []
            for price in valid_prices:
                try:
                    price_str = str(price).replace('$', '').replace(',', '')
                    if price_str.isdigit():
                        price_values.append(int(price_str))
                except:
                    continue
            
            if price_values:
                print(f"\nüíµ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:")
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: ${min(price_values)}")
                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${max(price_values)}")
                print(f"   –°—Ä–µ–¥–Ω—è—è: ${sum(price_values) // len(price_values)}")
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: {os.path.abspath('.')}")


def create_summary_excel():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞"""
    
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞...")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    excel_files = [f for f in os.listdir('.') if f.endswith('.xlsx')]
    
    if not excel_files:
        print("‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    all_products = []
    for filename in excel_files:
        try:
            df = pd.read_excel(filename, sheet_name=0)
            for _, row in df.iterrows():
                product = row.to_dict()
                product['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–∞'] = filename
                all_products.append(product)
        except:
            continue
    
    if not all_products:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π DataFrame
    df = pd.DataFrame(all_products)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID —Ç–æ–≤–∞—Ä–∞
    if 'ID —Ç–æ–≤–∞—Ä–∞' in df.columns:
        df = df.drop_duplicates(subset=['ID —Ç–æ–≤–∞—Ä–∞'], keep='first')
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    summary_filename = f"amazon_summary_{timestamp}.xlsx"
    
    with pd.ExcelWriter(summary_filename, engine='openpyxl') as writer:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df.to_excel(writer, sheet_name='–í—Å–µ —Ç–æ–≤–∞—Ä—ã', index=False)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_data = {
            '–ü–∞—Ä–∞–º–µ—Ç—Ä': [
                '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤',
                '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                '–§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞',
                '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö'
            ],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                len(all_products),
                len(df),
                len(excel_files),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'https://www.amazon.com/s?k=shoes'
            ]
        }
        
        stats_df = pd.DataFrame(stats_data)
        stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        for sheet_name in writer.sheets:
            worksheet = writer.sheets[sheet_name]
            worksheet.column_dimensions['A'].width = 30
            worksheet.column_dimensions['B'].width = 40
    
    print(f"‚úÖ –°–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {summary_filename}")
    print(f"üìÅ –ü—É—Ç—å: {os.path.abspath(summary_filename)}")
    print(f"üìä –¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–≤–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ: {len(df)}")


if __name__ == "__main__":
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    analyze_excel_files()
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    create_summary_excel()
    
    print("\nüéâ –û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("üìä Excel —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –≤ Excel –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
