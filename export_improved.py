"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ –≤ Excel
"""

import pandas as pd
from amazon_advanced import AdvancedAmazonParser
import asyncio
import logging
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def parse_and_export_improved(url: str, filename: str = None):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
    """
    
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"amazon_products_improved_{timestamp}.xlsx"
    
    print(f"üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: {url}")
    print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel: {filename}")
    print("=" * 60)
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã —Å –≤–∏–¥–∏–º—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        async with AdvancedAmazonParser(headless=False) as parser:
            products = await parser.parse(url)
        
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(products)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df['–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        df['URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞'] = url
        df['–ù–æ–º–µ—Ä'] = range(1, len(df) + 1)
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_order = ['–ù–æ–º–µ—Ä', 'id', 'name', 'price', '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞']
        df = df[columns_order]
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        df.columns = ['‚Ññ', 'ID —Ç–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞']
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
            df.to_excel(writer, sheet_name='–¢–æ–≤–∞—Ä—ã Amazon', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç workbook –∏ worksheet
            workbook = writer.book
            worksheet = writer.sheets['–¢–æ–≤–∞—Ä—ã Amazon']
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            column_widths = {
                'A': 8,   # ‚Ññ
                'B': 15,  # ID —Ç–æ–≤–∞—Ä–∞
                'C': 80,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                'D': 20,  # –¶–µ–Ω–∞
                'E': 20,  # –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
                'F': 40   # URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            }
            
            for col, width in column_widths.items():
                worksheet.column_dimensions[col].width = width
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_data = {
                '–ü–∞—Ä–∞–º–µ—Ç—Ä': [
                    '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤',
                    '–¢–æ–≤–∞—Ä—ã —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π',
                    '–¢–æ–≤–∞—Ä—ã –±–µ–∑ —Ü–µ–Ω—ã',
                    '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                    'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞',
                    '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
                ],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    len(products),
                    len([p for p in products if p['price'] != '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']),
                    len([p for p in products if p['price'] == '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞']),
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    url,
                    f"~{len(products) * 3} —Å–µ–∫—É–Ω–¥"
                ]
            }
            
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_worksheet = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            stats_worksheet.column_dimensions['A'].width = 30
            stats_worksheet.column_dimensions['B'].width = 40
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
            if len(products) > 0:
                examples_df = df.head(5).copy()
                examples_df.to_excel(writer, sheet_name='–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤', index=False)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç –ø—Ä–∏–º–µ—Ä–æ–≤
                examples_worksheet = writer.sheets['–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤']
                for col, width in column_widths.items():
                    examples_worksheet.column_dimensions[col].width = width
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
        print(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(filename)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        print(f"   ‚Ä¢ –° —Ü–µ–Ω–æ–π: {len([p for p in products if p['price'] != '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'])}")
        print(f"   ‚Ä¢ –ë–µ–∑ —Ü–µ–Ω—ã: {len([p for p in products if p['price'] == '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        print("\nüîç –í—Å–µ —Ç–æ–≤–∞—Ä—ã:")
        for i, product in enumerate(products, 1):
            print(f"   {i:2d}. {product['name'][:60]}{'...' if len(product['name']) > 60 else ''} - {product['price']}")
        
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel")
    print("=" * 50)
    
    # URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    url = "https://www.amazon.com/s?k=shoes"
    
    print(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥: {url}")
    print("‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥...")
    print()
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    result = asyncio.run(parse_and_export_improved(url))
    
    if result:
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {result}")
        print("\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
        print("   ‚Ä¢ –õ–∏—Å—Ç '–¢–æ–≤–∞—Ä—ã Amazon' - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã")
        print("   ‚Ä¢ –õ–∏—Å—Ç '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("   ‚Ä¢ –õ–∏—Å—Ç '–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤' - –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤")
        print("\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ LibreOffice –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")


if __name__ == "__main__":
    main()
